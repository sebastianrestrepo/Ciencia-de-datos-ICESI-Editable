Python Cheat sheet
------------------

---------------

SUBSETTING:
---------------
df['columna1'] --> Series con la columna en cuestión, shape(n, )
df.columna1    --> Series con la columna en cuestión, shape(n, )
df[['columna1']] --> DataFrame con la columna en cuestión, shape (n, 1)
df[['columna1', 'columna2']] --> DataFrame con las columnas en cuestión, shape (n, 2)
df[df.columna1 > 10] --> DataFrame con todas las filas cuyo valor de la columna1 tienen un valor superior a 10
df = df[df.columna1 > 10] --> se borran todas las filas cuyo valor de la columna1 tienen un valor inferior o igual a 10

No se puede seleccionar simultaneamente filas y columnas sin usar loc o iloc

.loc: seleccionar subconjuntos de filas y columnas a partir de sus nombres de filas 
df.loc['ANDRES'] --> Series con la fila de ANDRES = df[:]['ANDRES']
df.loc[['ANDRES', 'JAIME']] --> DataFrame con todas las columnas y las filas de ANDRES y JAIME
df.loc['ANDRES':'JAIME'] --> DataFrame con todas las columnas y las filas de ANDRES hasta JAIME incluido
df.loc['ANDRES':'JAIME':2] --> DataFrame con todas las columnas y las filas de ANDRES hasta JAIME incluido, de a 2 en 2
df.loc[:'JAIME'] --> DataFrame con todas las columnas y las filas desde la primera hasta JAIME incluido
df.loc['JAIME':] --> DataFrame con todas las columnas y las filas desde JAIME incluido hasta la última
df.loc[['ANDRES', 'JAIME'], ['col1', 'col2']] --> DataFrame con subsetting de filas y columnas 
df.loc[['ANDRES', 'JAIME'], 'col1'] --> DataFrame con subsetting de filas y columnas
df.loc['ANDRES':'JAIME':2, ['col1', 'col2']]  --> DataFrame con subsetting de filas y columnas
df.loc[:, ['col1', 'col2']]  --> DataFrame con subsetting de columnas
df.loc[df.columna3 == "ALTA", ['columna1', 'columna2']] --> DataFrame con las filas que validan la condición y las dos columnas en cuestión

.iloc: seleccionar subconjuntos de filas y columnas a partir de sus indices numéricos de posición
df.iloc[3] --> Series con todas las columnas de la fila con índice 3, shape (numcols, )
df.iloc[[3]] --> DataFrame con todas las columnas de la fila con índice 3, shape (1, numcols)
df.iloc[0:3] --> DataFrame, con todas las columnas de las filas con índices 0, 1 y 2 (se puede hacer cualquier combinación con '::')
df.iloc[0:10:2, 2:5] --> DataFrame, con las filas con índices 0, 2, 4, 6, 8, con las columnas 2 a 5
df.iloc[[1,3,5]] --> DataFrame, con todas las columnas de las filas con índices 1, 3 y 5
df.iloc[[1,3],[0,3,5]] --> DataFrame, con las filas con índices 1 y 3, y las columnas con índices 0, 3, y 5

EDA Y LIMPIEZA:
---------------
nparray.size()
nparray.shape
nparray.reshape() --> Cambiar las dimensiones de un array

df.shape --> obtiene las dimensiones de un DataFrame o Series
df.reshape() --> permite reorganizar el contenido de un DataFrame en otro espacio con otras dimensiones

df.info() --> Identificar valores faltantes y problemas de tipos de las columnas
df.describe(include="all") --> Identificar diferencias en las escalas de las variables, outliers, distribuciones estiradas
df.head() --> Consultar los primeros 5 registros
df.dtypes --> Consultar los tipos de las columnas de un DataFrame
df.size --> Cuenta el número de celdas de un DataFrame (filas x columnas)
df.shape --> Devuelve el número de dimensiones

np.squeeze(df_de_una_columna) --> Series, pasa de un shape (n, 1) a un shape(n, )
np.argmax(lista_numerica) --> posición del valor máximo en una lista

df.aggregate('mean') --> Calcula los promedios de cada columna. Funciona con count, sum, mean, std, min, max, ...
df.dropna() --> DataFrame con las filas que no tiene ningún valor faltante
	
df.col.astype(int) --> Cambiar el tipo de una columna en un DataFrame
df['col1'] = df['columna1'].abs() --> Cambiar valores negativos a positivos en un columna dada
df.columna1.abs() --> valor absoluto de la columna1	

strip() --> quitar leading y trailing blank spaces
check = 0<=age<=120 --> sanity checks

df.groupby(['col1','col2']).size().unstack('col1') --> crear una tabla de comparación entre variables categóricas

sns.kdeplot(df.Cuenta) --> Gráfico de densidad de la columna numérica columna1
sns.countplot(x="columna1", data=df) --> Gráfico de barras que cuenta los valores de una variable categórica llamada "columna1"
sns.pairplot(data=df, hue="columna1") --> Gráfico con las combinaciones entre las columnas del DataFrame, con el coloreado dado por las categorias de la columna1






